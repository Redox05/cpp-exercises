// The program below is written to demonstrate runtime polymorphism by using pure virtual functions.

#include<iostream>
#include<cmath>

class Shape{
    public:
        virtual double perimeter()=0; // This is a pure virtual function
        virtual double area()=0;
        virtual bool isSomething()=0;
};

class Rectangle : public Shape{
    private:
        double length;
        double width;
    public:
        Rectangle(double l, double w);

        void setLength(double l);
        void setWidth(double w);
        double getLength();
        double getWidth();

        double perimeter();
        double area();

        bool isSomething();

        ~Rectangle();
};

class Circle : public Shape{
    private:
        double radius;
    public:
        Circle(double r);

        void setRadius(double r);
        double getRadius();

        double area();
        double perimeter();

        bool isSomething();

        ~Circle();
        
};

/*****************************************************************************************/
int main(){
    double len, wid, rad;

    std::cout<<"Enter length: ";
    std::cin>>len;
    std::cout<<"Enter width: ";
    std::cin>>wid;
    std::cout<<"Enter radius: ";
    std::cin>>rad;

    Shape *r=new Rectangle(len,wid);
    Shape *c=new Circle(rad);

    std::cout<<"Area Rectangle: "<<r->area()<<std::endl;
    std::cout<<"Perimeter Rectangle: "<<r->perimeter()<<std::endl;
    if(r->isSomething()){
        std::cout<<"Square!"<<std::endl;
    }
    std::cout<<" "<<std::endl;
    std::cout<<"Area Cirlce: "<<c->area()<<std::endl;
    std::cout<<"Perimeter Circle: "<<c->perimeter()<<std::endl;
    if(c->isSomething()){
        std::cout<<"Unity Circle!"<<std::endl;
    }

    return 0;
}
/*****************************************************************************************/

//Rectangle Methods
Rectangle::Rectangle(double l, double w){
    setLength(l);
    setWidth(w);
}
void Rectangle::setLength(double l){
    if(l>0){
        length=l;
    }
    else{
        length=0;
    }
}
void Rectangle::setWidth(double w){
    if(w>0){
        width=w;
    }
    else{
        width=0;
    }
}
double Rectangle::getLength(){
    return length;
}
double Rectangle::getWidth(){
    return width;
}
double Rectangle::area(){
    return length*width;
}
double Rectangle::perimeter(){
    return 2*(length+width);
}
bool Rectangle::isSomething(){
    return length==width;
}
Rectangle::~Rectangle(){
    std::cout<<"Rectangle Destroyed"<<std::endl;
}

//Circle Methods
Circle::Circle(double r){
    setRadius(r);
}
void Circle::setRadius(double r){
    if(r>0){
        radius=r;
    }
    else{
        radius=1;
    }
}
double Circle::getRadius(){
    return radius;
}
double Circle::area(){
    return M_PI*pow(radius,2);
}
double Circle::perimeter(){
    return 2*M_PI*radius;
}
bool Circle::isSomething(){
    return radius==1;
}
Circle::~Circle(){
    std::cout<<"Circle destroyed"<<std::endl;
}