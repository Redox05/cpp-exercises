// In the program below, the Rectangle class inherits its properties to a new class called Cuboid. 
// The parameterized constructor of base class Rectangle is called using the Initializer List.

#include<iostream>

/*********************************************************************** */
//RECTANGLE
class Rectangle{
    
    int length;
    int width;

    public:

    //Constructors
    Rectangle(int l, int w);
    Rectangle(Rectangle &r);

    //Getters and setters
    void setLength(int l);
    void setWidth(int w);
    int getLength();
    int getWidth();

    //Functions
    int area();
    int perimeter();

    //Verificator
    bool isSquare();

    //Destructor
    ~Rectangle();


};

/*********************************************************************** */
//CUBOID
class Cuboid : public Rectangle{
    private:
        int height;
    public:
        Cuboid(int l, int w, int h);
        Cuboid(Cuboid &cubo);

        void setHeight(int h);
        int getHeight(){return height;}

        int Volume();

        bool isCube();

        ~Cuboid();

};


int main(){
    
    Rectangle r(10,10);
    Cuboid cub(5,10,1);

    std::cout<<" "<<std::endl;

    std::cout<<"Area of rectangle: "<<r.area()<<std::endl;
    if(r.isSquare()){
        std::cout<<"It is a square."<<std::endl;
    }
    std::cout<<" "<<std::endl;

    std::cout<<"Volume of the cuboid: "<<cub.Volume()<<std::endl;
    std::cout<<" "<<std::endl;

    return 0;
}


/************************************************************************/
//Cuboid methods
Cuboid::Cuboid(int l, int w, int h=1) : Rectangle(l,w){
    setHeight(h);
}

void Cuboid::setHeight(int h){
    if(h>0){
        height=h;
    }
    else{
        height=0;
    }
}

int Cuboid::Volume(){
    return getLength()*getWidth()*getHeight();
}

bool Cuboid::isCube(){
    return getLength()==getWidth()==getHeight();
}

Cuboid::~Cuboid(){
    // std::cout<<"Cuboid Destroyed!"<<std::endl;
}

/*********************************************************************** */
//Rectangle methods

Rectangle::Rectangle(int l=1, int w=1){
    setLength(l);
    setWidth(w);
}

Rectangle::Rectangle(Rectangle &rect){
    length=rect.length;
    width=rect.width;
}

void Rectangle::setLength(int l){
    if(l>0){
        length=l;
    }
    else{
        length=0;
    }
}

void Rectangle::setWidth(int w){
    if(w>0){
        width=w;
    }
    else{
        width=0;
    }
}

int Rectangle::getLength(){
    return length;
}

int Rectangle::getWidth(){
    return width;
}

int Rectangle::area(){
    return length*width;
}

int Rectangle::perimeter(){
    return 2*(length+width);
}

bool Rectangle::isSquare(){
    return length==width;
}

Rectangle::~Rectangle(){
    // std::cout<<"Rectangle Destroyed"<<endl;
}