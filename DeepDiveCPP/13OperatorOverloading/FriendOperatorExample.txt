// The program below uses a Complex class to add or substract two complex numbers.

// Both operators "+" and "-" are overloaded to be used to sum or substract instances of the class. However, 
// we use friend functions to overload these operators so that these functions have access to private members 
// of the class.

#include<iostream>

class Complex{
    private:
        double real;
        double imaginary;
    public:
        Complex(double real, double imag);
        Complex(Complex &x);

        void setReal(double real);
        void setImaginary(double imaginary);

        double getReal(){return real;}
        double getImaginary(){return imaginary;}

        friend Complex operator+(Complex a, Complex b);
        friend Complex operator-(Complex a, Complex b);

        bool isReal();

        // ~Complex();
};

int main(){
    Complex c1(5,3);
    Complex c2(3,5);
    Complex c3(0,0);

    c3=c1+c2;
    std::cout<<c3.getReal()<<" + "<<c3.getImaginary()<<"i"<<std::endl;

    c3=c1-c2;
    std::cout<<c3.getReal()<<" + "<<c3.getImaginary()<<"i"<<std::endl;

    return 0;
}

Complex::Complex(double real=0, double img=0){
    setReal(real);
    setImaginary(img);
}
Complex::Complex(Complex &x){
    real=x.real;
    imaginary=x.imaginary;
}
void Complex::setReal(double r){
    real=r;
}
void Complex::setImaginary(double im){
    imaginary=im;
}
Complex operator+(Complex a, Complex b){ //As it is a friend function, it does not need scope resolution operator
    Complex temp;
    temp.real=a.real+b.real;
    temp.imaginary=a.imaginary+b.imaginary;
    return temp;
}
Complex operator-(Complex a, Complex b){ //As it is a friend function, it does not need scope resolution operator
    Complex temp;
    temp.real=a.real-b.real;
    temp.imaginary=a.imaginary-b.imaginary;
    return temp;
}
bool Complex::isReal(){
    return imaginary==0;
}
// Complex::~Complex(){
//     cout<<"Object DESTROYED!"<<endl;
// }